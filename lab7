TASK 1

#!/bin/bash
TIMEOUT=$1
SCRIPT_PATH=$2
PID=-1  #status process
START_TIMESTAMP=$(date+%s)
LOGS_FILE_NAME="output_$START_TIMESTAMP.log"
ERRORS_FILE_NAME="errors_$START_TIMESTAMP.log"
while [0]; do
    if !ps -p $PID > /dev/null 2>&1; then
        bash $SCRIPT_PATH 1>>$LOGS_FILE_NAME 2>>$ERRORS_FILE_NAME
        PID=$!
        echo "PID: $PID"
    else
        echo "If the first process wont end, the second begin wont start"
    fi
    sleep $TIMEOUT
done
#fi - закрывает условный оператор if; timeout команда с ограничем по времени;


TASK 2
#!/bin/bash
K=0
while read f; do
    K = $((K + $(cat "$f" | sed  '/^\s*S/d' | grep -c '')))
done <<< $(find "$1" -name "*.c" -o -name "*.h")  #НАХОДИМ ВСЕ ФАЙЛЫ С КОНЦОВКОЙ
echo $K
#sed - delete empty lines in stream
#cat - unite in one file
#grep - do a list of files with double

TASK 3
#!/bin/env python
import sys
import string
import random
def make(a,b):
    symbols = string.ascii_letters + string.digits + string.punctuation
    for i in range(b):
        for j in range(a):
            print((random.choice(symbols)), end = "")
if __name__ == "__main__":
    args = sys.argv
    make(int(args[1]), int(args[2]))
    
    
TASK 4
#!/bin/env
import sys
def memory(func):
    cache = dict()
    def dec(*args):
        if not(args in cache):
            cache[args] = func(*args)
        return cache[args]
    return dec
@memory
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)


